{"version":3,"sources":["cache/MemoryCache.js"],"names":[],"mappings":"wjBAAA,8B,qRAEqB,W,YACnB,sBAAc,mCACZ,KAAK,IAAL,CAAY,EAAZ,CACA,KAAK,MAAL,CAAc,EAAd,CACD,C,wDAEI,G,CAAK,K,CAAO,K,CAAQ,gBACvB,OAAO,IAAI,OAAJ,CAAY,SAAC,OAAD,CAAU,MAAV,CAAqB,CACtC,MAAK,MAAL,CAAY,GAAZ,EACA,MAAK,UAAL,CAAgB,GAAhB,EACA,MAAK,IAAL,CAAU,GAAV,EAAiB,KAAjB,CACA,GAAI,KAAJ,CAAW,CACT,MAAK,WAAL,CAAiB,GAAjB,CAAsB,KAAtB,EACD,CACD,QAAQ,MAAK,IAAL,CAAU,GAAV,CAAR,EACD,CARM,CAAP,CASD,C,gCAEI,G,CAAK,iBACR,OAAO,IAAI,OAAJ,CAAY,SAAC,OAAD,CAAU,MAAV,CAAqB,CACtC,GAAI,OAAK,IAAL,CAAU,GAAV,CAAJ,CAAoB,OAAO,QAAQ,OAAK,IAAL,CAAU,GAAV,CAAR,CAAP,CAApB,KACK,OAAO,QAAQ,IAAR,CAAP,CACN,CAHM,CAAP,CAID,C,uCAEO,G,CAAK,iBACX,OAAO,IAAI,OAAJ,CAAY,SAAC,OAAD,CAAU,MAAV,CAAqB,CACtC,GAAI,GAAJ,CAAS,CACP,GAAI,OAAK,IAAL,CAAU,GAAV,CAAJ,CAAoB,OAAO,OAAK,IAAL,CAAU,GAAV,CAAP,C;AAErB,CAHD,KAGO,CACL,OAAK,IAAL,CAAY,EAAZ,CACA,OAAK,WAAL,GACD,CACD,UACD,CATM,CAAP,CAUD,C,sCAEO,G,CAAK,iBACX,OAAO,IAAI,OAAJ,CAAY,SAAC,OAAD,CAAU,MAAV,CAAqB,CACtC,GAAI,OAAK,IAAL,CAAU,GAAV,CAAJ,CAAoB,OAAO,QAAQ,IAAR,CAAP,CAApB,KACK,OAAO,QAAQ,KAAR,CAAP,CACN,CAHM,CAAP,CAID,C;8CAGW,G,CAAK,CACf,GAAI,KAAK,MAAL,CAAY,GAAZ,CAAJ,CAAsB,CACpB,aAAa,KAAK,MAAL,CAAY,GAAZ,CAAb,EACD,CACF,C;iDAGc,CACb,IAAK,IAAI,GAAT,IAAgB,KAAK,MAArB,CAA6B,CAC3B,KAAK,UAAL,CAAgB,GAAhB,EACD,CACF,C;gDAGY,G,CAAK,K,CAAO,iBACvB,KAAK,MAAL,CAAY,GAAZ,EAAmB,WAAW,kBAAM,OAAK,MAAL,CAAY,GAAZ,CAAN,EAAX,CAAmC,KAAnC,CAAnB,CACD,C,2CA9DkB,W","file":"cache/MemoryCache.js","sourcesContent":["import moment from 'moment';\n\nexport default class MemoryCache {\n  constructor() {\n    this.data = {};\n    this.timers = {};\n  }\n\n  put (key, value, timer)  {\n    return new Promise((resolve, reject) => {\n      this.delete(key);\n      this.clearTimer(key);\n      this.data[key] = value;\n      if (timer) {\n        this.deleteAfter(key, timer);\n      }\n      resolve(this.data[key]);\n    });\n  }\n\n  get (key) {\n    return new Promise((resolve, reject) => {\n      if (this.data[key]) return resolve(this.data[key]);\n      else return resolve(null);\n    });\n  }\n\n  delete (key) {\n    return new Promise((resolve, reject) => {\n      if (key) {\n        if (this.data[key]) delete this.data[key];\n        // clearTimer(key);\n      } else {\n        this.data = {};\n        this.clearTimers();\n      }\n      resolve();\n    });\n  }\n\n  exists (key) {\n    return new Promise((resolve, reject) => {\n      if (this.data[key]) return resolve(true);\n      else return resolve(false);\n    });\n  }\n\n  // internal\n  clearTimer (key) {\n    if (this.timers[key]) {\n      clearTimeout(this.timers[key]);\n    }\n  }\n\n  // internal\n  clearTimers () {\n    for (var key in this.timers) {\n      this.clearTimer(key);\n    }\n  }\n\n  // internal\n  deleteAfter (key, timer) {\n    this.timers[key] = setTimeout(() => this.delete(key), timer);\n  }\n}\n"],"sourceRoot":"/source/"}